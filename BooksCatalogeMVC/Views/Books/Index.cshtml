@using BooksCatalogeMVC.CustomHtlmHelpers;
@model BooksCatalogeMVC.ViewModels.BookIndexViewModel

@{
    ViewBag.Title = "All Books";
}
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<div class="main-content">
    <div class="row">
        <div>
            <div class="container">
                <div class="well well-sm">
                    <div class="btn-group">
                    @using (Html.BeginForm("Index", "books", FormMethod.Post, new { enctype = "multipart/form-data" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("SortDown", Model.Sort)
                        <div>
                            <input type="text" id="SearchText" name="SearchText" style="display:inline-block" class="search form-control " placeholder="Search Books">
                            <button type="submit" class="btn btn-default" style="display:inline-block"><span class="glyphicon glyphicon-search"></span></button>
                        </div>
                    }
                    </div>
                    <div class="drop">
                        @using (Html.BeginForm("Index", "books", FormMethod.Post, new { enctype = "multipart/form-data" }))
                        {
                            @Html.Hidden("SearchText", Model.Search)
                            @Html.MyDropDownList("SortDown", Model.SortList,Model.Sort, new {@class="btn btn-default" })
                        }
                    </div>
                    <div class="btn-group" style="display:inline-block;margin:5px">
                        @if (User.Identity.IsAuthenticated)
                        {
                            @Html.ActionLink("All Authors", "Index", "Authors", new RouteValueDictionary(), new { @class = "btn btn-default marg",})  
                            @Html.ActionLink("All Countries", "Index", "Countries", new RouteValueDictionary(), new { @class = "btn btn-default marg" })
                            @Html.ActionLink("Add Book", "Create",new RouteValueDictionary(), new { @class = "btn btn-default marg" })
                        }
                    </div>


                </div>
                <div id="books" class="row list-group flex">
                    @foreach (var item in Model.Books)
                        {
                        <div class="item col-xs-4 col-lg-4 list-group-item">
                            <div class="thumbnail">
                                @if (User.Identity.IsAuthenticated)
                                {
                                    <div class="book-del">
                                        <a data-modal href="@Url.Action("Delete", new RouteValueDictionary(new { id = item.Id }))">
                                            <i class="glyphicon glyphicon-remove"></i>
                                        </a>
                                        <a href="@Url.Action("Edit",new RouteValueDictionary(new { id=item.Id }))">
                                            <i class="glyphicon glyphicon-edit"></i>
                                        </a>
                                    </div>
                                }
                                <div class="caption">
                                    <a data-modal href="@Url.Action("Details", new RouteValueDictionary(new { id = item.Id }))">@Html.DisplayImage(Url.Content(item.ImagePath))</a>
                                    <div class="context cont">
                                        <a data-modal href="@Url.Action("Details",new RouteValueDictionary(new { id=item.Id}))">
                                            @if (item.Title.Length > 20)
                                            {
                                                @String.Concat(item.Title.Substring(0, 12), "...")
                                            }
                                            else
                                            {
                                                @Html.DisplayFor(modelItem => item.Title)
                                            }
                                        </a>
                                        <p class="group inner list-group-item-text Description">
                                            @if (item.Description != null)
                                            {
                                                if (item.Description.Length > 200)
                                                {
                                                    @String.Concat(item.Description.Substring(0, 200), "...")
                                                }
                                                else
                                                {
                                                    @Html.DisplayFor(modelItem => item.Description)
                                                }
                                            }
                                        </p>
                                        <div class="row under">
                                            <div class="col-xs-12 col-md-6">
                                                <p class="lead">
                                                    $@Html.DisplayFor(modelItem => item.Price)
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    @if(Model.Books.Count()==0)
                    {
                        <p class="info"> Sorry but there is no book for your search</p>
                    }
                </div>
            </div>
        </div>
    </div>
                    @Html.PagePrev(Model.CurrentPage, Model.PageSize, Model.Total,Model.Sort,Model.Search)
                    <div style="margin-left:1.5em;display:inline-block"></div>
                    @using (Html.BeginForm("Index", "books", FormMethod.Post, new { enctype = "multipart/form-data", @class="inline" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.Hidden("SearchText", Model.Search)
                        @Html.Hidden("SortDown", Model.SortList)
                        <input type="number" min="1" max="@Model.PagesCount" value="@Model.CurrentPage" name="page" class="btn btn-group btn-success " />
                        <input type="submit" value="Go to page" class="btn btn-group btn-success">
                    }
                    <div style="margin-left:1.5em;display:inline-block"></div>
                    @Html.PageNext(Model.CurrentPage, Model.PageSize, Model.Total, Model.Sort, Model.Search)


<div id='action' class='modal fade in'>
    <div class="modal-dialog">
        <div class="modal-content">
            <div id='Content'></div>
        </div>
    </div>
</div>



</div>
